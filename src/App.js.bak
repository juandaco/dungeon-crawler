import React, { Component } from 'react';
import './App.css';

// Components
import GameMap from './components/game-map';
// import Helpers from './classes/helpers';


class App extends Component {
  constructor() {
    super();

    let boardW = 70;
    let boardH = 50;
    let board = new Array(boardW * boardH).fill(0);

    this.state = {
      tileSize: 10,
      boardW,
      boardH,
      board,
      enemies: [],
      health: [],
      weapons: [],
      door: [],
      player: {
        health: 100,
        level: 1,
        weapon: {
          type: "sword",
          damage: 5
        },
        position: [0, 0], // Should be the middle of the board
      },
      boss: {},
      level: 0,
    };

    // Method's bindings
    this.generateMap = this.generateMap.bind(this);
    this.clearBoard = this.clearBoard.bind(this);
  }

  componentDidMount() {
    this.generateMap();
  }

  addEnemies() {

  }

  clearBoard() {
    let newBoard = this.state.board.slice();
    newBoard.fill(0);
    this.setState({
      board: newBoard
    });
  }



  generateMap() {

    // Copy the by value for avoiding mutations.
    let newBoard = this.state.board.slice();

    // Generates a Random Rectangle within board limits
    const randomRect = () => {
      //RoomSpecs
      let maxSize = 15;
      let minSize = 5;
      let distFromBorder = 3

      const w = Math.round(Math.random() * (maxSize - minSize)) + minSize;
      const h = Math.round(Math.random() * (maxSize - minSize)) + minSize;
      const x = Math.max(Math.round(this.state.boardW * Math.random() - w - distFromBorder), distFromBorder);
      const y = Math.max(Math.round(this.state.boardH * Math.random() - h - distFromBorder), distFromBorder);

      return { x, y, w, h };
    };


    // Given 2 rects determines if they superipose
    const itCollides = (newRect, rect) => {
      //A la Derecha y Abajo
      return ((newRect.x >= rect.x && newRect.x <= (rect.x + rect.w)) &&
          (newRect.y >= rect.y && newRect.y <= (rect.y + rect.h))) ||
        //A la Derecha y Arriba
        ((newRect.x >= rect.x && newRect.x <= (rect.x + rect.w)) &&
          (newRect.y <= rect.y && (newRect.y + newRect.h) >= rect.y)) ||
        // A la Izquierda y Abajo
        ((newRect.x <= rect.x && (newRect.x + newRect.w) >= rect.x) &&
          (newRect.y >= rect.y && newRect.y <= (rect.y + rect.h))) ||
        // A la Izquierda y Arriba
        ((newRect.x <= rect.x && (newRect.x + newRect.w) >= rect.x) &&
          (newRect.y <= rect.y && (newRect.y + newRect.h) >= rect.y));
    }


    // Given a Rectangle returns its indexes in the board
    const getRectPos = (rect) => {
      const startIndex = rect.x + rect.y * this.state.boardW;
      let indexes = [];

      for (let y = 0; y < rect.h; y++) {
        for (let x = 0; x < rect.w; x++) {
          indexes.push((x + startIndex) + (y * this.state.boardW));
        }
      }

      return indexes;
    };


    // Draws a given array of Indexes in the Board
    const setPosInBoard = (array) => {
      for (let i = 0; i < array.length; i++) {
        newBoard[array[i]] = 1;
      }
    };


    let notFilled = true;
    let attempts = 0;
    let rectangles = [];
    let roomCount = 2;

    while (notFilled) {
      attempts++;
      let newRect = randomRect();
      let isEmpty = true;

      for (let i = 0; i < rectangles.length; i++) {
        let rect = rectangles[i];
        if (itCollides(newRect, rect)) {
          isEmpty = false;
          break;
        }
      }

      if (isEmpty) {
        attempts = 0;
        rectangles.push(newRect);
      }

      if (rectangles.length === roomCount) {
        notFilled = false;
        break;
      }

      if (attempts > 100) {
        notFilled = false;
        break;
      }
    }




    let paths = [];
    for (let i = 0; i < rectangles.length; i++) {

      let path = [];
      let rect1 = rectangles[i];
      let rect2 = rectangles[i + 1];

      if (rect2) {
        let dist = {};

        dist.x = rect2.x - rect1.x;

        dist.dirX = dist.x > 0 ? 'right' : 'left';
        dist.x = Math.abs(dist.x);

        dist.y = rect2.y - rect1.y;
        dist.dirY = dist.y > 0 ? 'down' : 'up';
        dist.y = Math.abs(dist.y);
				

        if (dist.dirX === 'right') {
          for (let j = 0; j < dist.x; j++) {
            path.push([rect1.x + j, rect1.y]);
          }

        } else { // 'left'
          for (let j = 0; j < dist.x ; j++) {
            path.push([rect1.x - j, rect1.y]);
          }
        }

        if (dist.dirY === 'up') {
          for (let j = 0; j < dist.y; j++) {
            path.push([rect2.x, rect1.y - j]);
          }
        } else { // 'down'
          for (let j = 0; j < dist.y; j++) {
            path.push([rect2.x, rect1.y + j]);
          }
        }

        for (let i = 0; i < path.length; i++) {
        	let p = path[i];
        	paths.push(p[0] + p[1] * this.state.boardW);
        }

        paths.push(path);
      }
    }


    let posGeneral = [];
    // Convert Rectangles to Board positions
    for (let i = 0; i < rectangles.length; i++) {
      let rectPos = getRectPos(rectangles[i]);
      posGeneral = posGeneral.concat(rectPos);
    }

    setPosInBoard(posGeneral);
    setPosInBoard(paths);

    this.setState({
      board: newBoard
    });
  }

  render() {
    return (
      <div className="App">
      	<GameMap 
      		board={this.state.board} 
      		width={this.state.boardW}
      		height={this.state.boardH}
      		tileSize={this.state.tileSize}
      	/>
      	{<button onClick={this.clearBoard} >Clear</button>}
      	{<button onClick={this.generateMap} >Generate</button>}
      </div>
    );
  }
}


export default App;
